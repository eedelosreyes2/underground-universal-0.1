generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  udpatedAt        DateTime  @updatedAt
  email            String    @unique
  dob              DateTime?
  name             String
  location         String?
  badgeId          String?   @unique
  trackId          String?
  role             Role      @default(RAPPER)
  level            Level     @default(ROOKIE)
  genres           Genre[]
  bio              String?
  status           Status    @default(GUEST)
  streamings       String[]
  trackSig         Track?    @relation("Signature", fields: [trackId], references: [id])
  albums           Album[]
  badge            Badge?     
  tracks           Track[]
  studios          Studio[]
  features         Track[]   @relation("Features")
  sharedAlbums     Album[]   @relation("SharedAlbums")
  sharedAlbumsWith Album[]   @relation("SharedAlbumsWith")
  sharedTracks     Track[]   @relation("SharedTracks")
  sharedTracksWith Track[]   @relation("SharedTracksWith")
  Artist_B         Artist[]  @relation("collabs")
  Artist_A         Artist[]  @relation("collabs")
}

model Album {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  udpatedAt  DateTime @updatedAt
  released   DateTime
  artistId   String
  badgeId    String?  @unique
  studioId   String?
  name       String
  genres     Genre[]
  length     Int
  numTracks  Int
  imgSrc     String?  @unique
  streamSrc  String?  @unique
  artist     Artist   @relation(fields: [artistId], references: [id])
  badge      Badge?   @relation(fields: [badgeId], references: [id])
  studio     Studio?  @relation(fields: [studioId], references: [id])
  tracks     Track[]
  shared     Artist[] @relation("SharedAlbums")
  sharedWith Artist[] @relation("SharedAlbumsWith")
}

model Track {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  released   DateTime?
  artistId   String
  albumId    String?
  badgeId    String?   @unique
  studioId   String?
  name       String
  genres     Genre[]
  length     Int
  snippet    Int       @default(0)
  plays      Int       @default(0)
  imgSrc     String?
  streamSrc  String?   @unique
  album      Album?    @relation(fields: [albumId], references: [id])
  artist     Artist    @relation(fields: [artistId], references: [id])
  badge      Badge?    @relation(fields: [badgeId], references: [id])
  studio     Studio?   @relation(fields: [studioId], references: [id])
  trackSigs  Artist[]  @relation("Signature")
  features   Artist[]  @relation("Features")
  shared     Artist[]  @relation("SharedTracks")
  sharedWith Artist[]  @relation("SharedTracksWith")
}

model Studio {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  udpatedAt   DateTime @updatedAt
  url         String   @unique
  email       String?  @unique
  name        String
  location    String?
  bio         String?
  badgeId     String?  @unique
  hours       String?
  rates       String?
  hasEngineer Boolean  @default(false)
  hasMixing   Boolean  @default(false)
  hasVideo    Boolean  @default(false)
  badge       Badge?   @relation(fields: [badgeId], references: [id])
  albums      Album[]
  tracks      Track[]
  artists     Artist[]
}

model Badge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  artistId   String   @unique
  artist     Artist   @relation(fields: [artistId], references: [id])
  albums    Album?
  studios   Studio?
  tracks    Track?
}

enum Status {
  GUEST
  MEMBER
  BADGED
}

enum Role {
  RAPPER
  SINGER
  PRODUCER
  DJ
}

enum Level {
  ROOKIE
  PLAYER
  PRO
  VETERAN
}

enum Genre {
  HIPHOP
  ALTERNATIVE
  BOOMBAP
  EASTCOAST
  HARDCORE
  LOFI
  OLDSCHOOL
  POP
  RNB
  SOUTHERN
  TRAP
  UNDERGROUND
  MIDWEST
  WESTCOAST
  INSTRUMENTAL
}

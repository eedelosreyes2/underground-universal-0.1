### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Album {
  id: String
  name: String
}

type Artist {
  Artist_A: [Artist]
  Artist_B: [Artist]
  albums: [Album]
  badge: Badge
  badgeId: String
  bio: String
  createdAt: String
  dob: String
  email: String
  experience: Experience
  features: [Track]
  genres: [Genre]
  id: String
  imgSrc: String
  location: String
  name: String
  roles: [Role]
  sharedAlbums: [Album]
  sharedAlbumsWith: [Album]
  sharedTracks: [Track]
  sharedTracksWith: [Track]
  status: Status
  streamings: [String]
  studios: [Studio]
  trackId: String
  trackSig: Track
  tracks: [Track]
  udpatedAt: String
  username: String
}

type Badge {
  id: String
  name: String
}

"""Experience of Artist"""
enum Experience {
  PLAYER
  PRO
  ROOKIE
  VETERAN
}

"""Genres"""
enum Genre {
  ALTERNATIVE
  BOOMBAP
  EASTCOAST
  HARDCORE
  HIPHOP
  INSTRUMENTAL
  LOFI
  MIDWEST
  OLDSCHOOL
  POP
  RNB
  SOUTHERN
  TRAP
  UNDERGROUND
  WESTCOAST
}

type Mutation {
  updateArtist(bio: String, experience: String, genres: [String], id: String!, imgSrc: String, location: String, name: String, roles: [String], streamings: [String], trackSig: String, username: String): Artist!
}

type Query {
  artists: [Artist]!
  getArtistByEmail(email: String!): Artist!
  getArtistByUsername(username: String!): Artist!
  studios: [Studio]!
}

"""Role(s) of Artist"""
enum Role {
  DJ
  PRODUCER
  RAPPER
  SINGER
}

"""Status of Artist account"""
enum Status {
  BADGED
  GUEST
  MEMBER
}

type Studio {
  albums: [String]
  artists: [String]
  bio: String
  email: String
  hasEngineer: Boolean
  hasMixing: Boolean
  hasVideo: Boolean
  hours: String
  id: String
  location: String
  name: String
  rates: String
  tracks: [String]
  url: String
}

type Track {
  id: String
  name: String
}